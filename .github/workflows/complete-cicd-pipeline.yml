name: Complete CI/CD Pipeline

on:
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: my-app/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install frontend dependencies
      run: |
        cd my-app
        npm ci

    - name: Install backend dependencies
      run: |
        cd BACKEND
        pip install -r requirements.txt

    - name: Run frontend tests
      run: |
        cd my-app
        CI=true npm test -- --watchAll=false --transformIgnorePatterns "node_modules/(?!axios)/"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Set up Docker Compose
      run: |
        # Install Docker Compose v1 for compatibility
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Build Docker images
      run: |
        docker-compose build

    - name: Run Docker containers
      run: |
        docker-compose up -d
        sleep 10  # Give containers time to start

    - name: Check if containers are running
      run: |
        docker-compose ps

    - name: Check backend health
      run: |
        curl -f http://localhost:5003 || echo "Backend not responding"

    - name: Stop Docker containers
      run: |
        docker-compose down

  deploy-and-run:
    name: Deploy and Run Application
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: my-app/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install frontend dependencies
      run: |
        cd my-app
        npm ci

    - name: Install backend dependencies
      run: |
        cd BACKEND
        pip install -r requirements.txt

    - name: Start backend server
      run: |
        cd BACKEND
        python app.py &
        echo "Backend server started on http://localhost:5003"
        sleep 5  # Give the backend time to start

    - name: Start frontend development server
      run: |
        cd my-app
        npm start &
        echo "Frontend server started on http://localhost:3000"
        sleep 10  # Give the frontend time to start

    - name: Open application in browser
      run: |
        if command -v xdg-open &> /dev/null; then
          xdg-open http://localhost:3000
        elif command -v open &> /dev/null; then
          open http://localhost:3000
        else
          echo "Cannot open browser automatically. Please visit http://localhost:3000"
        fi

    - name: Keep servers running
      run: |
        echo "Application is now running locally"
        echo "Frontend: http://localhost:3000"
        echo "Backend: http://localhost:5003"
        echo "Press Ctrl+C to stop the servers"
        # Keep the workflow running for a while to allow testing
        sleep 3600  # Run for 1 hour


