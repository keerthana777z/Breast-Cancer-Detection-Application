name: Complete CI/CD Pipeline

on:
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-deploy:
    name: Build, Test, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # ===== SETUP ENVIRONMENT =====
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: my-app/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    # ===== INSTALL DEPENDENCIES =====
    - name: Install frontend dependencies
      run: |
        cd my-app
        npm ci

    - name: Install backend dependencies
      run: |
        cd BACKEND
        pip install -r requirements.txt

    # ===== VERIFY MODEL FILE =====
    - name: Verify model file exists
      run: |
        cd BACKEND
        ls -la
        echo "Checking for model file..."
        if [ -f "my_model3.h5" ]; then
          echo "✅ Model file found: my_model3.h5"
        else
          echo "❌ Model file not found!"
          exit 1
        fi

    # ===== RUN TESTS =====
    - name: Run frontend tests
      run: |
        cd my-app
        CI=true npm test -- --watchAll=false --transformIgnorePatterns "node_modules/(?!axios)/"

    # ===== BUILD AND TEST DOCKER IMAGES =====
    - name: Build Docker images
      run: |
        docker-compose build

    - name: Run Docker containers for testing
      run: |
        docker-compose up -d
        sleep 10  # Give containers time to start

    - name: Check if containers are running
      run: |
        docker-compose ps

    - name: Check backend health
      run: |
        curl -f http://localhost:5003 || echo "Backend not responding"

    - name: Stop Docker containers
      run: |
        docker-compose down

    # ===== BUILD AND PUSH DOCKER IMAGES =====
    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build and push backend Docker image
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: docker/build-push-action@v4
      with:
        context: ./BACKEND
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/breast-cancer-backend:latest

    - name: Build and push frontend Docker image
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: docker/build-push-action@v4
      with:
        context: ./my-app
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/breast-cancer-frontend:latest

    # ===== DEPLOY TO SERVER =====
    - name: Create deployment files
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      run: |
        # Create a docker-compose.yml file for deployment
        cat > docker-compose.prod.yml << EOF
        version: '3.8'

        services:
          backend:
            image: ${{ secrets.DOCKER_HUB_USERNAME }}/breast-cancer-backend:latest
            ports:
              - "5003:5003"
            environment:
              - MODEL_PATH=/app/my_model3.h5
              - PORT=5003
            restart: always
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:5003"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s

          frontend:
            image: ${{ secrets.DOCKER_HUB_USERNAME }}/breast-cancer-frontend:latest
            ports:
              - "80:80"
            depends_on:
              backend:
                condition: service_healthy
            restart: always
        EOF

        # Create a deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash

        # Pull the latest images
        docker-compose -f docker-compose.prod.yml pull

        # Stop and remove existing containers
        docker-compose -f docker-compose.prod.yml down

        # Start the new containers
        docker-compose -f docker-compose.prod.yml up -d

        # Check if containers are running
        docker-compose -f docker-compose.prod.yml ps

        echo "Deployment completed successfully!"
        EOF

        chmod +x deploy.sh

    - name: Deploy to production server
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        source: "docker-compose.prod.yml,deploy.sh"
        target: "~/breast-cancer-app"

    - name: Execute deployment script
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          cd ~/breast-cancer-app
          ./deploy.sh

    # ===== NOTIFY DEPLOYMENT STATUS =====
    - name: Notify deployment success
      if: success() && github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      run: |
        echo "✅ Deployment completed successfully!"
        echo "Application is now available at:"
        echo "Frontend: http://${{ secrets.SSH_HOST }}"
        echo "Backend API: http://${{ secrets.SSH_HOST }}:5003"

    - name: Notify deployment failure
      if: failure() && github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      run: |
        echo "❌ Deployment failed!"


