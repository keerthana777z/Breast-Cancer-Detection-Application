name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: my-app/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install frontend dependencies
      run: |
        cd my-app
        npm ci

    - name: Install backend dependencies
      run: |
        cd BACKEND
        pip install -r requirements.txt

    - name: Run frontend tests
      run: |
        cd my-app
        CI=true npm test -- --watchAll=false --transformIgnorePatterns "node_modules/(?!axios)/"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Set up Docker Compose
      run: |
        # Install Docker Compose v1 for compatibility
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
        # Also check Docker Compose V2
        docker --version
        docker compose version

    - name: Build and test Docker images
      run: |
        docker-compose build

    - name: Run Docker containers
      run: |
        docker-compose up -d
        sleep 10  # Give containers time to start

    - name: Check if containers are running
      run: |
        docker-compose ps

    - name: Check backend health
      run: |
        curl -f http://localhost:5003 || echo "Backend not responding"

    - name: Stop Docker containers
      run: |
        docker-compose down

  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build, tag, and push backend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: breast-cancer-detection-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./BACKEND
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Build, tag, and push frontend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: breast-cancer-detection-frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./my-app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Generate Dockerrun.aws.json
      run: |
        cat > Dockerrun.aws.json << EOF
        {
          "AWSEBDockerrunVersion": "3",
          "containerDefinitions": [
            {
              "name": "backend",
              "image": "${{ steps.login-ecr.outputs.registry }}/breast-cancer-detection-backend:latest",
              "essential": true,
              "memory": 512,
              "portMappings": [
                {
                  "hostPort": 5003,
                  "containerPort": 5003
                }
              ],
              "environment": [
                {
                  "name": "PORT",
                  "value": "5003"
                }
              ]
            },
            {
              "name": "frontend",
              "image": "${{ steps.login-ecr.outputs.registry }}/breast-cancer-detection-frontend:latest",
              "essential": true,
              "memory": 256,
              "portMappings": [
                {
                  "hostPort": 80,
                  "containerPort": 80
                }
              ],
              "links": [
                "backend"
              ]
            }
          ]
        }
        EOF

    - name: Deploy to AWS Elastic Beanstalk
      uses: einaregilsson/beanstalk-deploy@v21
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: breast-cancer-detection
        environment_name: breast-cancer-detection-env
        version_label: ${{ github.sha }}
        region: us-east-1
        deployment_package: Dockerrun.aws.json
